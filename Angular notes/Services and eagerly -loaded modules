We know that 
- declaring a service in the app module's "providers" array or 
- using the @Injectable({ providedIn: 'root' }) decorator in a service's class

means that the service is available application-wide and is a singleton instance.

As well as that, declaring a service in any child module's "providers" array - where that child moduleis eagerly loaded - achieves the same effect.

The only time in our app that a separate instance of a service is created is if we add a service to a child module's "providers" array, and that child module is lazily loaded.

For the singleton services, they're injected using Angular's "root injector", whereas the separate service instance that's created for lazily loaded child modules is created using a child injector.

Based on the fact that an eagerly loaded child module's service are also singeltons, it's best practice to only declare your services in the app module, orby using the @Injectable({ providedIn: 'root' }) decorator in a service's class

Note: - If you define a "SharedModule" as eagerlyloaded, then import that module into a lazy loaded module, a separate instance of all the SharedModule's services will be created to accomodate the lazy loaded module

