We're mocking Angular's HttpClient class, so that we can trigger an error when testing:

BeforeEach...
{
TestBed.configureTestingModule({
      imports: [],
      providers: [
        provideMockStore(),
        provideMockActions(() => actions),
        {
          provide: HttpClient,
          useValue: jasmine.createSpyObj('HttpClient', ['post'])
        }
      ],
    });
httpService = TestBed.get<HttpClient>(HttpClient);
}


In the test or a beforeEach...
// we do mock as usual on the obj.prop.and.returnValue()
// then inside the returnValue, we use the rxjs operator: throwError
httpService.post.and.returnValue(throwError({
      error: {
        error: {
          message: 'EMAIL_EXISTS'
        }
      }
}));

Now, any http calls in our effects classes will trigger the catchError callback when under test.
