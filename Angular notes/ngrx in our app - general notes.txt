// app.module.ts
import { StoreModule } from '@ngrx/store';

imports: [
....
StoreModule.forRoot({ shoppingList: ShoppingListReducer }),
]


In a component where we want to access the shoppingList store,
we have to inject a store in the ctor, of the following type:

private store: Store<{ shoppingList: { ingredients: Ingredient[] } }>

- the name used as the key in the app module has to be the same when injecting the store into your component (i.e. - 'shoppingList'

- then you call this.store.select('shoppingList'); in your component's ngOnInit hook

---------------------
Async code is always forbidden in the reducer.
Accessing things like localstorage is ok.
---------------------

Always ensure to handle a default case in your actions, this is especially important because whenever an action is dispatched in say, auth actions, all reducer are activated (lke shopping-list or recipe reducer).
They just don't have an action in the payload, which is they will use the default case and return their current state again.

---------------------

For bigger apps, where your action names may eventually duplciate an clash (because action names need to be available throughout the app), a recommended pattern in NgRx is to prefix the string value of your action, like so:

export const ADD_INGREDIENT = '[Shopping List] ADD_INGREDIENT'
