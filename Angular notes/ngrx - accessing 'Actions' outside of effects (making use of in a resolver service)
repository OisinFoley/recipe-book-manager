We primarily make use of an actions$ prop of type 'Actions', as well as the 'ofType()' operator in our NgRx effects classes.
The 'Actions' type and 'ofType()' operator are both provided by NgRx.

Reminder: ofType is used to spy on actions of a certain type, so that we can kickstart a http request, or some localstorage access.

We can also use 'ofType' outside of an effects class, in something like a resolver service.

In our recipes app, we define a RecipesResolverService in our recipes-routing module.
Resolvers are a way to fetch data before loading the route.

In our pre-store approach, this RecipesResolverService just called the data storage service, which did a http request, and returned an observable.
The data storage service returns an observable because our class signature implements Resolve<T>, and the resolve interface's resolve() function needs to return an observable.

With our store approach, we cannot just dispatch an action, because this does not return an observable.
Instead, we will use 'ofType' in the RecipesResolverService.
This means the resolve service will dispatch FetchRecipes(), then when the fetch recipes action is finished and dispatches SetRecipes(), our resolver service will be notified of this, and have an observable available to return to the route that's waiting to be resolved.

Updated class:

export class RecipesResolverService implements Resolve<Recipe[]> {
  constructor(
    private store: Store<fromApp.AppState>,
    private actions$: Actions
  ) {}

  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    return this.store.select('recipes').pipe(
      take(1),
      map(recipesState => {
        return recipesState.recipes;
      }),
      switchMap(recipes => {
        if (recipes.length === 0) {
	  *** THIS STARTS ACTION THAT WILL FETCH THE DATA ***
          this.store.dispatch(new RecipesActions.FetchRecipes());
	  *** THIS RETURNS THE REQUIRED OBSERVABLE ***
          return this.actions$.pipe(
            ofType(RecipesActions.SET_RECIPES),
            take(1)
          );
        } else {
	  *** THIS JUST RETURNS THE STORE'S CONTENTS IF WE'RE NAVIGATING FROM SOMETHING LIKE A RECIPE EDIT BACK TO THE MAIN RECIPES LIST PAGE (AND PREVENTS A SECOND REQUEST WHICH WOULD OVERWRITE WHATEVER WE JUST CHANGED IN THE EDIT PAGE BEFORE WE GOT A CHANCE TO SAVE THOSE CHANGES TO THE BACKEND USING THE 'SAVE RECIPES' BUTTON ***
          return of(recipes);
        }
      })
    );    
  }
}


