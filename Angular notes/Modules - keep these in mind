1. when working with a module that isn't the app.module (module 'child'),
you need to export your declarations, so that those declarations can be made available in other modules (parent or sibling) that are importing the 'child' module for use

e.g. -
@NgModule({
  declarations: [
    RecipesComponent,
    RecipeListComponent,
    RecipeDetailComponent,
    RecipeItemComponent,
    RecipeStartComponent,
    RecipeEditComponent
  ],
  exports: [
    RecipesComponent,
    RecipeListComponent,
    RecipeDetailComponent,
    RecipeItemComponent,
    RecipeStartComponent,
    RecipeEditComponent
  ]
})

2. Angular-specifc libraries that appear in the app.module's imports array are not automatically available to other imported modules
This means if your app module imports a RecipesModule, then RecipesModule still needs to declare things like the BrowserModule, FormsModule and HttpClientModule etc.

The BrowserModule is responsible for providing use of *ngFor in our templates (possibly others, but unconfirmed), so it's an essential import for child modules.
BrowserModule can only be importe dinto 1 module in the whole app though, because it also provides some essential bootstrapping functionality.

For child modules, import CommonModule instead of BrowserModule

3. If creating a routing file for your child module, then instead of calling "import: RouterModule.forRoot(routesArray)"
like you would in the app.module (which is our root),

we call "import: RouterModule.forChild(routesArray)"
