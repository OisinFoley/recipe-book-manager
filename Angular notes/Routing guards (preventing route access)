when defining your list of routes under your prop of type Routes,
define a prop on the route which performs authentication logic before navigating to the route.
you will define what's known as a guard, and it's done like so: 

{ path: 'servers',
    // canActivate: [AuthGuard],
    canActivateChild: [AuthGuard],
    component: ServersComponent, children: [
      { path: ':id', component: ServerComponent },
      { path: ':id/edit', component: EditServerComponent }
]},

as you can see, a guard can be defined for the overall route -> 'canActivate',
or, just for the child routes -> 'canActivateChild'

this AuthGuard that you see plugged in, is just a service and can be as simple as something like the following:

// injectable used because we make use of an auth service that just returns false by default 
in this example
@Injectable()
// implements means it's defining interfaces that'll be used
export class AuthGuard implements CanActivate, CanActivateChild {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ) : Observable<boolean> | Promise<boolean> | boolean {
// call the service, act on its promise and return true or false.
// this is what defines the value of the 'canActivate' or 'canActivateChild' prop we saw in our list of Routes
    return this.authService.isAuthenticated()
      .then(
        (authenticated: Boolean) => {
          if (authenticated) {
            return true;
          } else {
            this.router.navigate(['/']);
          }
        }
      ) 
  }

  canActivateChild(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ) : Observable<boolean> | Promise<boolean> | boolean {
// for demonstartion purposes, it just copies the behaviour of the call to see if all routes under the given name can be accessed (i.e. - this checks route children also, whereas earlier func does not)
    return this.canActivate(route, state);
  }
}



there's also a canDeactivateGuard which can be used to prevent a redirection in the event that the user has edited some data but not persisted it, hence you may want to ask them to confirm the request to redirect

see routing-start repo for example of this, example is long to type out but understandable
