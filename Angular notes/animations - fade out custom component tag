*Example at bottom*

When you want to fade-in/out regular HTML tags, you just do it like so:

<a
	class="list-group-item pointer-cursor"
	[@shopping-list]
	*ngFor="let ingredient of (ingredients | async).ingredients; let i = index"
	(click)="onEditItem(i)">
	{{ ingredient.name }} ({{ ingredient.amount }})
</a>


animations: [
    trigger('shopping-list', [
      state('in', style(inStateListItemStyle)),
      transition('void => *', [
        useAnimation(inwardListItemTransition, {
          params: {
            opacity: 0,
            transform : 'translateX(-100px)',
            time: '300ms'
          }
        })
      ]),
      transition('* => void', [
        animate(300, style(fadeoutListItemTransitionStyle))
      ])
    ])
  ]

- To fade-in/out a COMPONENT (rather than just HTML tags), you need to define the fade-in animation in the component itself, and define the fade-out animation within the component's parent.
- As well as this, you cannot define the animation on the component itself, you will need to wrap the component in a div and define the fade-out animation on the div.
- If you don't follow this approach, then when the component attempts to fade-out, it'll either destroy immediately or destroy after the time interval provided to the animation elapses (but the animation won't happen)

Example:

// note that the custom trigger (component-fade-out) is defined on the div, not the actual component tag
<div
      *ngFor="let recipeEl of recipes; let i = index;"
      @component-fade-out>
        <app-recipe-item
          [recipe]="recipeEl"
          [index]="i">
        </app-recipe-item>
</div>

animations: [
    trigger('component-fade-out', [
      transition('* => void', [
        animate(300, style(fadeoutListItemTransitionStyle))
      ])
    ])
  ]
